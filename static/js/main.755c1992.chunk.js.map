{"version":3,"sources":["components/Navigation/NavigationItem/NavigationItem.js","components/Navigation/Navigation.js","components/CurrentTime/CurrentTime.js","utils/navigationList.js","components/App/App.js","serviceWorker.js","index.js"],"names":["NavigationItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","item","event","preventDefault","stopPropagation","onClick","itemRef","current","React","createRef","classes","classNames","react_default","a","createElement","className","ref","href","concat","section","label","Component","defaultProps","Navigation","getSlidelineStyle","element","width","clientWidth","marginLeft","offsetLeft","handleResize","throttle","setState","slidelineStyle","state","currentElement","currentItem","newList","navigationList","map","objectSpread","window","addEventListener","removeEventListener","_this2","customClass","_this$state","Navigation_NavigationItem_NavigationItem","key","style","CurrentTime","_this$props","city","cities","App","components_Navigation_Navigation","components_CurrentTime_CurrentTime","Boolean","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.755c1992.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport './NavigationItem.css'\n\nclass NavigationItem extends Component {\n  constructor(props) {\n    super(props)\n    this.itemRef = React.createRef()\n  }\n\n  static propTypes = {\n    item: PropTypes.shape().isRequired,\n    onClick: PropTypes.func\n  }\n\n  static defaultProps = {\n    onClick: () => {}\n  }\n\n  handleClick = item => event => {\n    event.preventDefault()\n    event.stopPropagation()\n\n    const { onClick } = this.props\n\n    onClick(item, this.itemRef.current)\n  }\n\n  render() {\n    const { item } = this.props\n\n    const classes = classNames(\n      'navigationItem',\n      item.current ? 'navigationItem--current' : ''\n    )\n\n    return (\n      <li\n        className={classes}\n        onClick={this.handleClick(item)}\n        ref={this.itemRef}\n      >\n        <a href={`#${item.section}`}>{item.label}</a>\n      </li>\n    )\n  }\n}\n\nexport default NavigationItem\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport throttle from 'lodash/throttle'\n\nimport NavigationItem from './NavigationItem/NavigationItem'\n\nimport './Navigation.css'\n\nclass Navigation extends Component {\n  static propTypes = {\n    customClass: PropTypes.string,\n    navigationList: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n    onClick: PropTypes.func\n  }\n\n  static defaultProps = {\n    customClass: '',\n    onClick: () => {}\n  }\n\n  constructor(props) {\n    super(props)\n    const { navigationList } = props\n\n    this.state = {\n      navigationList,\n      slidelineStyle: {}\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.handleResize)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize)\n  }\n\n  getSlidelineStyle = element => {\n    return element\n      ? {\n          width: element.clientWidth,\n          marginLeft: element.offsetLeft\n        }\n      : {}\n  }\n\n  handleResize = throttle(() => {\n    this.setState({\n      slidelineStyle: this.getSlidelineStyle(this.state.currentElement)\n    })\n  }, 500)\n\n  handleClick = (currentItem, element) => {\n    const { onClick } = this.props\n    const { navigationList } = this.state\n\n    const newList = navigationList.map(item => ({\n      ...item,\n      current: item.section === currentItem.section\n    }))\n\n    this.setState({\n      currentElement: element,\n      navigationList: newList,\n      slidelineStyle: this.getSlidelineStyle(element)\n    })\n\n    onClick()\n  }\n\n  render() {\n    const { customClass } = this.props\n    const { navigationList, slidelineStyle } = this.state\n\n    const classes = classNames('navigation', customClass)\n\n    return navigationList ? (\n      <nav className={classes}>\n        <ul className=\"navigation__container\">\n          {navigationList.map(item => (\n            <NavigationItem\n              item={item}\n              key={item.section}\n              current={item.current}\n              onClick={this.handleClick}\n            />\n          ))}\n        </ul>\n        <span className=\"navigation__slideline\" style={slidelineStyle} />\n      </nav>\n    ) : (\n      ''\n    )\n  }\n}\n\nexport default Navigation\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport './CurrentTime.css'\n\nclass CurrentTime extends Component {\n  static propTypes = {\n    city: PropTypes.shape().isRequired,\n    customClass: PropTypes.string\n  }\n\n  static defaultProps = {\n    customClass: ''\n  }\n\n  render() {\n    const { city, customClass } = this.props\n\n    const classes = classNames('current-time', customClass)\n\n    return city ? (\n      <nav className={classes}>\n        <div className=\"current-time__time\" />\n        <div className=\"current-time__zone\" />\n      </nav>\n    ) : (\n      ''\n    )\n  }\n}\n\nexport default CurrentTime\n","const navigationList = {\n  \"cities\": [\n    {\n      \"section\": \"cupertino\",\n      \"label\": \"Cupertino\"\n    },\n    {\n      \"section\": \"new-york-city\",\n      \"label\": \"New York City\"\n    },\n    {\n      \"section\": \"london\",\n      \"label\": \"London\"\n    },\n    {\n      \"section\": \"amsterdam\",\n      \"label\": \"Amsterdam\"\n    },\n    {\n      \"section\": \"tokyo\",\n      \"label\": \"Tokyo\"\n    },\n    {\n      \"section\": \"hong-kong\",\n      \"label\": \"Hong Kong\"\n    },\n    {\n      \"section\": \"sydney\",\n      \"label\": \"Sydney\"\n    }\n  ]\n}\n\nexport default navigationList","import React, { Component } from 'react'\nimport Navigation from '../Navigation/Navigation'\nimport CurrentTime from '../CurrentTime/CurrentTime'\nimport navigationList from '../../utils/navigationList'\n\nimport './Reset.css'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Navigation navigationList={navigationList.cities} />\n        </header>\n        <div>\n          <CurrentTime />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}